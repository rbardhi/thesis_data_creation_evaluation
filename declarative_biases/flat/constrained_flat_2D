%%% -*- Mode: Prolog; -*-
:- use_module(library(lists)).

cnt(X, P,Count) :- findall(X,P,L), length(L,Count).

oneElementOfList([H|_], X) :- X = H.

lmax(L, M) :- lmax(L, [], [], M).
lmax([], Seen, MMax, Max) :- MMax=[] -> Max=Seen; lmax(MMax, [], [], Max).
lmax([H|T], Seen, MMax, Max) :- (member(H, Seen) -> lmax(T, Seen, [H|MMax], Max); lmax(T, [H|Seen], MMax, Max)).
maxMod(X, P, Max) :- findall(X,P,L), lmax(L, Max1), oneElementOfList(Max1, Max).

lmin(L, M) :- lmin(L, [], [], M).
lmin([], Seen, MMin, Min) :- MMin=[] -> Min=Seen, !; leftover(Seen, MMin, [], Min).
lmin([H|T], Seen, Left, Min) :- (member(H, Seen) -> lmin(T, Seen, [H|Left], Min); lmin(T, [H|Seen], Left, Min)).
leftover([], MMin, TMin, Min) :- TMin=[] -> lmin(MMin, [], [], Min); Min=TMin, !.
leftover([H|Seen], MMin, TMin, Min) :- (member(H, MMin)) -> leftover(Seen, MMin, TMin, Min); leftover(Seen, MMin, [H|TMin], Min).
minMod(X, P, Min) :- findall(X,P,L), lmin(L, Min1), oneElementOfList(Min1, Min).

list2set([], []).
list2set([H|T], [H|T1]) :- subtract(T, [H], T2), list2set(T2, T1).

%%%%% Use this only if running in probabilistic mode %%%%%
%maxMod(Template,Goal,G) :-
%    findall(X,bagof(Template,Goal,X),Lists),
%    flatten(Lists,G3),
%    list2set(G3,Gset),
%    member(G,Gset).

%minMod(Template,Goal,G) :-
%    findall(X,bagof(Template,Goal,X),Lists),
%    flatten(Lists,G3),
%    list2set(G3,Gset),
%    member(G,Gset).

max(X, P, Max) :- findall(X,P,L), max_list(L, Max).

min(X, P, Min) :- findall(X,P,L), min_list(L, Min).

listavg(L, C, A) :- C =:= 0 -> false; sum_list(L, Sum), A is Sum / C.
avg(X, P, Avg) :- findall(X,P,L), length(L,Cnt), listavg(L, Cnt, Avg).

%%%%%%%%%%% Declarative Bias states here %%%%%%%%%%%%
:- discontiguous shape/3.
:- discontiguous size/3.
:- discontiguous heavy/3.
:- discontiguous posX_t0/3.
:- discontiguous posY_t0/3.
:- discontiguous displX/3.
:- discontiguous displY/3.
:- discontiguous move_left_of/4.
:- discontiguous move_north_of/4.
:- discontiguous left_of/4.
:- discontiguous north_of/4.
:- discontiguous posX_t1/3.
:- discontiguous posY_t1/3.
:- discontiguous atleastOneLeft/3.
:- discontiguous atleastOneNorth/3.
:- discontiguous atleastOneRight/3.
:- discontiguous atleastOneSouth/3.
:- discontiguous blocked_left/3.
:- discontiguous blocked_north/3.
:- discontiguous blocked_right/3.
:- discontiguous blocked_south/3.
:- discontiguous l_o_shape/4.
:- discontiguous l_o_posX_t0/4.
:- discontiguous mmshl/3.
:- discontiguous avglshpos/4.
:- discontiguous all_combined/3.

%Types
base(shape(w,id,sh)).
base(size(w,id,x)).
base(heavy(w,id,b)).
base(posX_t0(w,id,x)).
base(posY_t0(w,id,x)).
base(displX(w,id,x)).
base(displY(w,id,x)).
base(move_left_of(w,id,id,b)).
base(move_north_of(w,id,id,b)).
base(left_of(w,id,id,b)).
base(north_of(w,id,id,b)).
base(posX_t1(w,id,x)).
base(posY_t1(w,id,x)).
base(atleastOneLeft(w,id,sh)).
base(atleastOneNorth(w,id,sh)).
base(atleastOneRight(w,id,sh)).
base(atleastOneSouth(w,id,sh)).
base(blocked_left(w,id,b)).
base(blocked_north(w,id,b)).
base(blocked_right(w,id,b)).
base(blocked_south(w,id,b)).
  
%Modes
mode(displX, none, shape(+,+,-)).
mode(displX, none, heavy(+,+,-)).
mode(displX, none, atleastOneLeft(+,+,-)).
mode(displX, none, atleastOneNorth(+,+,-)).
mode(displX, none, atleastOneRight(+,+,-)).
mode(displX, none, atleastOneSouth(+,+,-)).
mode(displX, none, blocked_left(+,+,-)).
mode(displX, none, blocked_north(+,+,-)).
mode(displX, none, blocked_right(+,+,-)).
mode(displX, none, blocked_south(+,+,-)). 
  
mode(displY, none, shape(+,+,-)).
mode(displY, none, heavy(+,+,-)).
mode(displY, none, atleastOneLeft(+,+,-)).
mode(displY, none, atleastOneNorth(+,+,-)).
mode(displY, none, atleastOneRight(+,+,-)).
mode(displY, none, atleastOneSouth(+,+,-)).
mode(displY, none, blocked_left(+,+,-)).
mode(displY, none, blocked_north(+,+,-)).
mode(displY, none, blocked_right(+,+,-)).
mode(displY, none, blocked_south(+,+,-)). 
  
mode(posX_t1, none, displX(+,+,-)).
mode(posX_t1, none, posX_t0(+,+,-)).

mode(posY_t1, none, displY(+,+,-)).
mode(posY_t1, none, posY_t0(+,+,-)).

%Aggregations
agg(none).
agg(avg).
agg(min).
agg(max).
agg(maxMod).
agg(minMod).

%Declare the type of random variables
thres(shape, 3, discrete, [square,triangle,circle]).
thres(size, 3, continuous, []).
thres(heavy, 3, discrete, [true,false]).
thres(posX_t0, 3, continuous, []).
thres(posY_t0, 3, continuous, []).
thres(displX, 3, continuous, []).
thres(displY, 3, continuous, []).
thres(move_left_of, 4, discrete, [true,false]).
thres(move_north_of, 4, discrete, [true,false]).
thres(left_of, 4, discrete, [true,false]).
thres(north_of, 4, discrete, [true,false]).
thres(posX_t1, 3, continuous, []).
thres(posY_t1, 3, continuous, []).
thres(atleastOneLeft, 3, discrete, [square,triangle,circle]).
thres(atleastOneNorth, 3, discrete, [square,triangle,circle]).
thres(atleastOneRight, 3, discrete, [square,triangle,circle]).
thres(atleastOneSouth, 3, discrete, [square,triangle,circle]).
thres(blocked_left, 3, discrete, [true,false]).
thres(blocked_north, 3, discrete, [true,false]).
thres(blocked_right, 3, discrete, [true,false]).
thres(blocked_south, 3, discrete, [true,false]).

%Target
learn(displX, 3, 3, continuous).
learn(displY, 3, 3, continuous). 
learn(posX_t1, 3, 3, continuous).
learn(posY_t1, 3, 3, continuous).

atleastOneLeft(W,I,Sh) :-
  findall(S,(left_of(W,I,I1,true),shape(W,I1,S)),L),member(Sh,L).
  
atleastOneRight(W,I,Sh) :-
  findall(S,(left_of(W,I1,I,true),heavy(W,I1,true),shape(W,I1,S)),L),member(Sh,L).
  
atleastOneNorth(W,I,Sh) :-
  findall(S,(north_of(W,I,I1,true),shape(W,I1,S)),L),member(Sh,L).
  
atleastOneSouth(W,I,Sh) :-
  findall(S,(north_of(W,I1,I,true),heavy(W,I1,true),shape(W,I1,S)),L),member(Sh,L).

blocked_left(W,I,B) :-
  posX_t0(W,I,X),posY_t0(W,I,Y),size(W,I,S),
  findall(I1,(left_of(W,I,I1,true),posX_t0(W,I1,X1),posY_t0(W,I1,Y1),size(W,I1,S1),sqrt(((X-0.75) - X1)**2 + ((Y+0) - Y1)**2) =< S + S1),L),
  (member(Q,L) -> B = true ; B = false).

blocked_right(W,I,B) :-
  posX_t0(W,I,X),posY_t0(W,I,Y),size(W,I,S),
  findall(I1,(left_of(W,I1,I,true),posX_t0(W,I1,X1),posY_t0(W,I1,Y1),size(W,I1,S1),sqrt(((X+0.75) - X1)**2 + ((Y+0) - Y1)**2) =< S + S1),L),
  (member(Q,L) -> B = true ; B = false).

blocked_south(W,I,B) :-
  posX_t0(W,I,X),posY_t0(W,I,Y),size(W,I,S),
  findall(I1,(north_of(W,I1,I,true),posX_t0(W,I1,X1),posY_t0(W,I1,Y1),size(W,I1,S1),sqrt(((X+0) - X1)**2 + ((Y-0.75) - Y1)**2) =< S + S1),L),
  (member(Q,L) -> B = true ; B = false).

blocked_north(W,I,B) :-
  posX_t0(W,I,X),posY_t0(W,I,Y),size(W,I,S),
  findall(I1,(north_of(W,I,I1,true),posX_t0(W,I1,X1),posY_t0(W,I1,Y1),size(W,I1,S1),sqrt(((X+0) - X1)**2 + ((Y+0.75) - Y1)**2) =< S + S1),L),
  (member(Q,L) -> B = true ; B = false).

%%%%%%%%%%% Declarative Bias ends here %%%%%%%%%%%%

